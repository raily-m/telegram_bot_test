import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import  Command
from aiogram import F
import asyncio

load_dotenv()
BOT_TOKEN = os.getenv("TG_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

pets = {}

main_kb = types.ReplyKeyboardMarkup(
keyboard = [
    [types.KeyboardButton(text= "ü•ê–ü–æ–∫–æ—Ä–º–∏—Ç—å"), types.KeyboardButton(text= "üòÅ–ü–æ–∏–≥—Ä–∞—Ç—å")],
    [types.KeyboardButton(text= "üò¥–°–ø–∞—Ç—å"), types.KeyboardButton(text= "‚ú®–°—Ç–∞—Ç—É—Å")],
    [types.KeyboardButton(text= "‚ùå–í—ã—Ö–æ–¥")]
],

resize_keyboard = True


)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        new_pet = {
            "name": "üòª –ñ–æ—Ä–∏–∫",
            "hunger": 50,
            "energy": 50,
            "happines": 50,

        }


    
        pets[user_id] = new_pet

        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
            f"–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å–æ —Å–≤–æ–∏–º –ø–∏—Ç–æ–º—Ü–µ–º: {pets[user_id]["name"]}!\n"
            f"–ü–æ–∑–∞–±–æ—Ç—å—Å—è –æ –Ω–µ–º!", 
            reply_markup=main_kb
        )

@dp.message(F.text == "ü•ê–ü–æ–∫–æ—Ä–º–∏—Ç—å")
async def feed_pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    pet['hunger'] = min(pet['hunger'] + 10, 100)
    pet["energy"]=max(pet["energy"] -5, 0)
    await message.answer(f"{pet["name"]} –≤–∫—É—Å–Ω–æ –ø–æ–∫—É—à–∞–ª!")


@dp.message(F.text == "üòÅ–ü–æ–∏–≥—Ä–∞—Ç—å")
async def play_pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    pet['happines'] = min(pet['happines'] + 10, 100)
    pet["energy"]=max(pet["energy"] -5, 0)
    await message.answer(f"{pet["name"]} –≤–µ—Å–µ–ª–æ –ø–æ–∏–≥—Ä–∞–ª!")

@dp.message(F.text == "ü•ê–ü–æ–∫–æ—Ä–º–∏—Ç—å")
async def feed_pet(message: types.Message):


    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    pet['hunger'] = min(pet['hunger'] + 10, 100)
    pet["energy"]=max(pet["energy"] -5, 0)
    await message.answer(f"{pet["name"]} –≤–∫—É—Å–Ω–æ –ø–æ–∫—É—à–∞–ª!")

def progress_bar(value: int, lenght: int):
    field =int(value/100*10)
    return "üü©" * field + " "* (lenght - field)

@dp.message(F.text == "‚ú®–°—Ç–∞—Ç—É—Å")
async def status_pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    hun = pet['hunger']
    en = pet['energy']
    hap = pet['happines']

    status = (
        f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ {pet['name']}:\n"
        f"–°—ã—Ç–æ—Å—Ç—å: {hun}% {progress_bar(hun, 10)}\n"
        f"–≠–Ω–µ—Ä–≥–∏—è: {en}% {progress_bar(en, 10)}\n"
        f"–°—á–∞—Å—Ç—å–µ: {hap}% {progress_bar(hap, 10)}\n"
    )

    await message.answer(status)
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())